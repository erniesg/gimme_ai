{
  "version": 3,
  "sources": ["../durable_objects.js", "../workflow.js", "../handlers/api_workflow.js", "../handlers/video_workflow.js", "../worker.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["// Rate Limiter Durable Object for IP-based and global rate limiting\n\nexport class IPRateLimiter {\n  constructor(state, env) {\n    this.state = state;\n    this.storage = state.storage;\n    this.env = env;\n    this.limit = 5;\n    this.rateWindow = \"lifetime\";\n  }\n\n  async fetch(request) {\n    const url = new URL(request.url);\n\n    // Add reset functionality\n    if (url.pathname === \"/reset\") {\n      await this.storage.delete(\"count\");\n      console.log({\n        event: \"rate_limit_reset\",\n        type: \"per_ip\",\n        ip: url.hostname,\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"IP rate limiter reset successfully\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n\n    const count = await this.storage.get(\"count\") || 0;\n\n    // Check if the limit has been reached\n    if (count >= this.limit) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        type: \"per_ip\",\n        ip: url.hostname,\n        count: count,\n        limit: this.limit,\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        error: \"Rate limit exceeded\",\n        limit: this.limit,\n        type: \"per_ip\",\n        window: this.rateWindow,\n        message: \"You have exceeded the per-IP rate limit for the free tier\"\n      }), {\n        status: 429,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-RateLimit-Limit\": this.limit,\n          \"X-RateLimit-Remaining\": 0,\n          \"X-RateLimit-Reset\": \"n/a\",\n          \"X-RateLimit-Window\": this.rateWindow,\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n        }\n      });\n    }\n\n    // Increment the counter\n    await this.storage.put(\"count\", count + 1);\n    console.log({\n      event: \"rate_limit_increment\",\n      type: \"per_ip\",\n      ip: url.hostname,\n      count: count + 1,\n      limit: this.limit,\n      remaining: this.limit - (count + 1),\n      timestamp: new Date().toISOString()\n    });\n\n    // Return success\n    return new Response(JSON.stringify({\n      success: true,\n      used: count + 1,\n      remaining: this.limit - (count + 1),\n      limit: this.limit,\n      window: this.rateWindow,\n      type: \"per_ip\"\n    }), {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-RateLimit-Limit\": this.limit,\n        \"X-RateLimit-Remaining\": this.limit - (count + 1),\n        \"X-RateLimit-Window\": this.rateWindow,\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n      }\n    });\n  }\n}\n\nexport class GlobalRateLimiter {\n  constructor(state, env) {\n    this.state = state;\n    this.storage = state.storage;\n    this.env = env;\n    this.limit = 10;\n    this.rateWindow = \"lifetime\";\n  }\n\n  async fetch(request) {\n    const url = new URL(request.url);\n\n    // Add reset functionality\n    if (url.pathname === \"/reset\") {\n      await this.storage.delete(\"count\");\n      console.log({\n        event: \"rate_limit_reset\",\n        type: \"global\",\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Global rate limiter reset successfully\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n\n    const count = await this.storage.get(\"count\") || 0;\n\n    // Check if the limit has been reached\n    if (count >= this.limit) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        type: \"global\",\n        count: count,\n        limit: this.limit,\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        error: \"Global rate limit exceeded\",\n        limit: this.limit,\n        type: \"global\",\n        window: this.rateWindow,\n        message: \"The free tier global rate limit has been reached\"\n      }), {\n        status: 429,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-RateLimit-Limit\": this.limit,\n          \"X-RateLimit-Remaining\": 0,\n          \"X-RateLimit-Reset\": \"n/a\",\n          \"X-RateLimit-Window\": this.rateWindow,\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n        }\n      });\n    }\n\n    // Increment the counter\n    await this.storage.put(\"count\", count + 1);\n    console.log({\n      event: \"rate_limit_increment\",\n      type: \"global\",\n      count: count + 1,\n      limit: this.limit,\n      remaining: this.limit - (count + 1),\n      timestamp: new Date().toISOString()\n    });\n\n    // Return success\n    return new Response(JSON.stringify({\n      success: true,\n      used: count + 1,\n      remaining: this.limit - (count + 1),\n      limit: this.limit,\n      window: this.rateWindow,\n      type: \"global\"\n    }), {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-RateLimit-Limit\": this.limit,\n        \"X-RateLimit-Remaining\": this.limit - (count + 1),\n        \"X-RateLimit-Window\": this.rateWindow,\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n      }\n    });\n  }\n}", "// Workflow template for gimme-ai-test\nimport { WorkflowEntrypoint } from 'cloudflare:workers';\nimport { NonRetryableError } from 'cloudflare:workflows';\nimport * as WorkflowUtils from './workflow_utils.js';\n\n// Import handlers based on workflow type\n\n// Import both handlers for dual mode\nimport apiWorkflowHandler from './handlers/api_workflow.js';\nimport videoWorkflowHandler from './handlers/video_workflow.js';\n\n\n// Get API base URL from config\nconst apiBaseUrl = 'https://berlayar-ai--wanx-backend-app-function.modal.run';  // This will be replaced during template rendering\n\n// Get steps from config\nconst workflowSteps = [{\"config\": {\"retries\": 3, \"timeout\": \"30 seconds\"}, \"endpoint\": \"/workflow/init\", \"method\": \"POST\", \"name\": \"init\"}, {\"config\": {\"retries\": {\"backoff\": \"exponential\", \"delay\": \"5s\", \"limit\": 3}, \"timeout\": \"2m\"}, \"depends_on\": [\"init\"], \"endpoint\": \"/workflow/generate_script/{job_id}\", \"method\": \"POST\", \"name\": \"generate_script\", \"poll\": {\"endpoint\": \"/workflow/status/{job_id}\", \"interval\": \"5s\", \"max_attempts\": 60}}, {\"config\": {\"retries\": {\"backoff\": \"exponential\", \"delay\": \"5s\", \"limit\": 3}, \"timeout\": \"5m\"}, \"depends_on\": [\"generate_script\"], \"endpoint\": \"/workflow/generate_audio/{job_id}\", \"method\": \"POST\", \"name\": \"generate_audio\", \"poll\": {\"endpoint\": \"/workflow/status/{job_id}\", \"interval\": \"5s\", \"max_attempts\": 60}}, {\"config\": {\"retries\": {\"backoff\": \"exponential\", \"delay\": \"5s\", \"limit\": 3}, \"timeout\": \"5m\"}, \"depends_on\": [\"generate_script\"], \"endpoint\": \"/workflow/generate_base_video/{job_id}\", \"method\": \"POST\", \"name\": \"generate_base_video\", \"poll\": {\"endpoint\": \"/workflow/status/{job_id}\", \"interval\": \"5s\", \"max_attempts\": 60}}, {\"config\": {\"retries\": {\"backoff\": \"exponential\", \"delay\": \"5s\", \"limit\": 3}, \"timeout\": \"2m\"}, \"depends_on\": [\"generate_audio\"], \"endpoint\": \"/workflow/generate_captions/{job_id}\", \"method\": \"POST\", \"name\": \"generate_captions\", \"poll\": {\"endpoint\": \"/workflow/status/{job_id}\", \"interval\": \"5s\", \"max_attempts\": 60}}, {\"config\": {\"retries\": {\"backoff\": \"exponential\", \"delay\": \"5s\", \"limit\": 3}, \"timeout\": \"5m\"}, \"depends_on\": [\"generate_base_video\", \"generate_audio\", \"generate_captions\"], \"endpoint\": \"/workflow/combine_final_video/{job_id}\", \"method\": \"POST\", \"name\": \"combine_final_video\", \"poll\": {\"endpoint\": \"/workflow/status/{job_id}\", \"interval\": \"5s\", \"max_attempts\": 60}}];  // This will be replaced during template rendering\n\n/**\n * GimmeAiTestWorkflow - A workflow for gimme-ai-test\n * Type: dual\n */\nexport class GimmeAiTestWorkflow extends WorkflowEntrypoint {\n  /**\n   * Run the workflow\n   */\n  async run(event, step) {\n    console.log('Event received:', JSON.stringify(event));\n\n    // Initialize workflow first to get the job_id\n    const initResult = await step.do(\"init_step\", async () => {\n      const response = await fetch(`${apiBaseUrl}/workflow/init`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Auth-Source': 'gimme-ai-gateway',\n          'X-Auth-Mode': 'admin'\n        },\n        body: JSON.stringify({\n          // Since we don't have content in the event, we'll use a default or fetch from state\n          content: \"Debug Modal connection\",\n          options: {}\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Init step failed:', errorText);\n        throw new NonRetryableError(`Failed to initialize workflow: ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log('Init step result:', result);\n      return result;\n    });\n\n    // Store the job_id for subsequent steps\n    const jobId = initResult.job_id;\n    console.log('Using job_id:', jobId);\n\n    // Generate script\n    await step.do(\"generate_script\", async () => {\n      const response = await fetch(`${apiBaseUrl}/workflow/generate_script/${jobId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Auth-Source': 'gimme-ai-gateway',\n          'X-Auth-Mode': 'admin'\n        }\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Generate script step failed:', errorText);\n        throw new NonRetryableError(`Failed to generate script: ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log('Generate script result:', result);\n      return result;\n    });\n\n    // Poll until script generation is complete\n    await step.do(\"poll_script_generation\", async () => {\n      let attempts = 0;\n      const maxAttempts = 60;\n\n      while (attempts < maxAttempts) {\n        const response = await fetch(`${apiBaseUrl}/workflow/status/${jobId}?step=script`, {\n          headers: {\n            'X-Auth-Source': 'gimme-ai-gateway',\n            'X-Auth-Mode': 'admin'\n          }\n        });\n\n        if (!response.ok) {\n          console.error('Script status check failed:', await response.text());\n          await step.sleep(\"retry_delay\", \"5 seconds\");\n          attempts++;\n          continue;\n        }\n\n        const status = await response.json();\n        console.log('Script status:', status);\n\n        if (status.status === \"completed\") {\n          return status;\n        } else if (status.status === \"failed\") {\n          throw new NonRetryableError(`Script generation failed: ${status.error || 'Unknown error'}`);\n        }\n\n        await step.sleep(\"polling_delay\", \"5 seconds\");\n        attempts++;\n      }\n\n      throw new NonRetryableError(\"Timeout waiting for script generation\");\n    });\n\n    // After script is ready, trigger audio and base video in parallel\n    await Promise.all([\n      step.do(\"generate_audio\", async () => {\n        const response = await fetch(`${apiBaseUrl}/workflow/generate_audio/${jobId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Auth-Source': 'gimme-ai-gateway',\n            'X-Auth-Mode': 'admin'\n          }\n        });\n\n        if (!response.ok) {\n          throw new NonRetryableError(`Failed to start audio generation: ${await response.text()}`);\n        }\n\n        return await response.json();\n      }),\n      step.do(\"generate_base_video\", async () => {\n        const response = await fetch(`${apiBaseUrl}/workflow/generate_base_video/${jobId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Auth-Source': 'gimme-ai-gateway',\n            'X-Auth-Mode': 'admin'\n          }\n        });\n\n        if (!response.ok) {\n          throw new NonRetryableError(`Failed to start base video generation: ${await response.text()}`);\n        }\n\n        return await response.json();\n      })\n    ]);\n\n    // Return the final status\n    return { jobId, status: \"processing\" };\n  }\n\n  /**\n   * Get request body for a step\n   */\n  getRequestBody(stepName, state) {\n    // Determine if this is a video or API workflow based on URL path or payload properties\n    const isVideoWorkflow = state.workflow_type === 'video' ||\n                             state.content && state.options && !state.instanceId;\n\n    // For the first step, include the full payload\n    if (stepName === workflowSteps[0]?.name) {\n      // For video workflow, use specific format\n      if (isVideoWorkflow) {\n        return {\n          content: state.content,\n          options: state.options || {},\n          apiPrefix: state.apiPrefix || '/api/video'\n        };\n      }\n      // For API workflow, pass through all parameters\n      return {\n        ...state,\n        apiPrefix: state.apiPrefix || '/api/video'\n      };\n    }\n\n    // For subsequent steps, include minimal information\n    return {\n      requestId: state.requestId,\n      job_id: state.job_id || state.instanceId,\n      apiPrefix: state.apiPrefix || '/api/video'\n    };\n  }\n}\n\n/**\n * HTTP handler for workflow requests\n */\nexport const workflowHandler = {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    console.log(\"Workflow handler received path:\", path);\n\n    // Set project name in env for handlers to use\n    env.PROJECT_NAME = \"gimme-ai-test\";\n\n    // Handle workflow API route\n    if (path.startsWith('/workflow')) {\n      \n      // Handle via API workflow handler\n      return apiWorkflowHandler.fetch(request, env);\n      \n    }\n\n    // Handle video workflow routes\n    if (path.startsWith('/generate_video_stream') ||\n        path.startsWith('/job_status/') ||\n        path.startsWith('/get_video/') ||\n        path.startsWith('/videos/') ||\n        path.startsWith('/cleanup/')) {\n      \n      // Use video workflow handler\n      return videoWorkflowHandler.fetch(request, env);\n      \n    }\n\n    // No handler matched\n    return new Response(JSON.stringify({\n      error: \"Workflow endpoint not found\",\n      path: path,\n      type: \"dual\"\n    }), {\n      status: 404,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n};\n\n/**\n * Default workflow request handler (backwards compatible)\n */\nasync function defaultWorkflowRequestHandler(request, env, workflowClass, workflowType) {\n  const url = new URL(request.url);\n\n  if (!url.pathname.startsWith('/workflow')) {\n    return new Response('Not found', { status: 404 });\n  }\n\n  // Check for status requests\n  const instanceId = url.searchParams.get('instanceId');\n  if (instanceId) {\n    try {\n      const instance = await env[workflowClass].get(instanceId);\n      const status = await instance.status();\n      return Response.json({ status });\n    } catch (error) {\n      return Response.json({\n        error: 'Invalid instance ID',\n        message: String(error)\n      }, { status: 404 });\n    }\n  }\n\n  // Create new workflow instance\n  let params = {};\n  if (request.method === 'POST') {\n    try {\n      params = await request.json();\n    } catch (e) {\n      return Response.json({\n        error: 'Invalid JSON',\n        message: String(e)\n      }, { status: 400 });\n    }\n  }\n\n  // Add requestId if not provided\n  if (!params.requestId) {\n    params.requestId = crypto.randomUUID();\n  }\n\n  try {\n    const instance = await env[workflowClass].create({\n      ...params,\n      requestId: params.requestId,\n      workflow_type: workflowType || 'api'\n    });\n    return Response.json({\n      success: true,\n      instanceId: instance.id,\n      requestId: params.requestId,\n      message: 'Workflow started'\n    });\n  } catch (error) {\n    console.error(\"Workflow creation error:\", error, \"Class:\", workflowClass, \"Available bindings:\", Object.keys(env));\n    return Response.json({\n      success: false,\n      error: 'Failed to start workflow',\n      message: String(error),\n      availableBindings: Object.keys(env)\n    }, { status: 500 });\n  }\n}\n\n// Helper function to parse time strings like \"5s\" to milliseconds\nfunction parseTimeString(timeStr) {\n  const match = timeStr.match(/^(\\d+)([smh])$/);\n  if (!match) return 5000; // Default to 5 seconds\n\n  const [_, value, unit] = match;\n  const numValue = parseInt(value, 10);\n\n  switch (unit) {\n    case 's': return numValue * 1000;\n    case 'm': return numValue * 60 * 1000;\n    case 'h': return numValue * 60 * 60 * 1000;\n    default: return 5000;\n  }\n}", "/**\n * Simple API Workflow Handler\n * Provides basic API orchestration for simpler workflows\n */\nimport * as WorkflowUtils from '../workflow_utils.js';\n\n// Expose the handler to the global scope\nglobalThis.apiWorkflowHandler = {\n  /**\n   * Process workflow-related requests\n   * @param {Request} request - The incoming HTTP request\n   * @param {Object} env - Environment variables and bindings\n   * @param {Object} workflowConfig - Configuration for this workflow\n   * @param {string} workflowClass - Cloudflare workflow class name\n   * @returns {Response} - HTTP response\n   */\n  processWorkflowRequest: async (request, env, workflowConfig, workflowClass) => {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    console.log(`Simple API workflow request to ${path}`);\n\n    // Only handle /workflow requests\n    if (!path.startsWith('/workflow')) {\n      return new Response('Not found', { status: 404 });\n    }\n\n    // Handle workflow creation\n    if (path === '/workflow' && request.method === 'POST') {\n      return await handleCreateWorkflow(request, env, workflowClass);\n    }\n\n    // Handle workflow status\n    const instanceId = url.searchParams.get('instanceId');\n    if (instanceId) {\n      return await handleWorkflowStatus(request, env, workflowClass, instanceId);\n    }\n\n    // Default response for unsupported paths\n    return new Response(JSON.stringify({\n      error: 'Unsupported API workflow endpoint',\n      path: path\n    }), {\n      status: 404,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};\n\n/**\n * Handle creating a new workflow instance\n */\nasync function handleCreateWorkflow(request, env, workflowClass) {\n  try {\n    // Parse request body\n    const body = await request.json();\n\n    // Generate a request ID if not provided\n    const requestId = body.requestId || crypto.randomUUID();\n\n    console.log(`Starting simple API workflow for request ${requestId}`);\n\n    // Create workflow instance\n    const workflowInstance = await env[workflowClass].create({\n      ...body,\n      requestId: requestId\n    });\n\n    return new Response(JSON.stringify({\n      success: true,\n      instanceId: workflowInstance.id,\n      requestId: requestId,\n      message: 'Workflow started'\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error starting workflow:', error);\n    return new Response(JSON.stringify({\n      error: 'Failed to start workflow',\n      message: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Handle checking workflow status\n */\nasync function handleWorkflowStatus(request, env, workflowClass, instanceId) {\n  try {\n    console.log(`Checking workflow status for ${instanceId}`);\n\n    // Get workflow instance\n    const instance = await env[workflowClass].get(instanceId);\n    const status = await instance.status();\n\n    return new Response(JSON.stringify({\n      status: status\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error checking workflow status:', error);\n    return new Response(JSON.stringify({\n      error: 'Failed to check workflow status',\n      message: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Export the handler\nexport default {\n  fetch: async (request, env) => {\n    const workflowClass = `${env.PROJECT_NAME || \"{{ project_name }}\"}`.toUpperCase().replace(/-/g, '_') + \"_WORKFLOW\";\n    return apiWorkflowHandler.processWorkflowRequest(request, env, null, workflowClass);\n  }\n};\n", "/**\n * Video Workflow Handler\n * Orchestrates stepwise video generation workflow based on config\n */\n\n/**\n * Helper function to make authenticated API calls to the backend\n * @param {string} endpoint - API endpoint to call\n * @param {Object} options - Fetch options\n * @param {Request} request - Original request for auth headers\n * @returns {Promise<Response>} - API response\n */\nasync function callBackendAPI(endpoint, options = {}, request) {\n  try {\n    // Initialize headers if not provided\n    if (!options.headers) {\n      options.headers = new Headers();\n    }\n\n    // Copy authentication headers from the original request\n    const headersToForward = [\n      'authorization',\n      'x-auth-source',\n      'x-auth-mode',\n      'x-project-name',\n      'modal-key',\n      'modal-secret',\n      'content-type',\n    ];\n\n    headersToForward.forEach(header => {\n      const value = request.headers.get(header);\n      if (value) {\n        options.headers.set(header, value);\n      }\n    });\n\n    // Always set content type if not already set and we have a body\n    if (options.body && !options.headers.get('content-type')) {\n      options.headers.set('content-type', 'application/json');\n    }\n\n    // Make the API call\n    console.log(`Calling backend API: ${endpoint}`);\n    const response = await fetch(endpoint, options);\n\n    // Log response status\n    console.log(`API response status: ${response.status}`);\n\n    return response;\n  } catch (error) {\n    console.error(`API call error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Handle the initial video generation request\n * Creates a workflow instance for tracking the process\n */\nasync function handleGenerateVideo(request, env, workflowClass, apiBaseUrl) {\n  try {\n    console.log(\"Starting video generation process\");\n    console.log(`API Base URL: ${apiBaseUrl}`);\n    console.log(`Workflow class: ${workflowClass}`);\n    console.log(`Available env bindings: ${Object.keys(env)}`);\n\n    // Parse the request body\n    const body = await request.json();\n    const { content, options = {} } = body;\n\n    if (!content) {\n      return new Response(JSON.stringify({\n        error: \"Missing required content field\"\n      }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Initialize the workflow on the backend using the first step from config: /workflow/init\n    const initResponse = await callBackendAPI(\n      `${apiBaseUrl}/workflow/init`,\n      {\n        method: 'POST',\n        body: JSON.stringify({ content, options })\n      },\n      request\n    );\n\n    if (!initResponse.ok) {\n      const errorText = await initResponse.text();\n      console.error(`Failed to initialize workflow: ${errorText}`);\n      return new Response(JSON.stringify({\n        error: \"Failed to initialize workflow\",\n        details: errorText\n      }), {\n        status: initResponse.status,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Parse the response to get the job_id\n    const initData = await initResponse.json();\n    const jobId = initData.job_id;\n\n    console.log(`Workflow initialized with job_id: ${jobId}`);\n\n    // Create a workflow instance to track the progress\n    let workflowInstance;\n    try {\n      if (env[workflowClass]) {\n        console.log(`Creating workflow instance with class: ${workflowClass}`);\n        workflowInstance = await env[workflowClass].create({\n          requestId: jobId,\n          job_id: jobId,\n          workflow_type: 'video',\n          content,\n          options\n        });\n\n        console.log(`Workflow instance created: ${workflowInstance.id}`);\n      } else {\n        console.warn(`Workflow class ${workflowClass} not found in environment, using direct API mode`);\n      }\n    } catch (error) {\n      console.error(`Error creating workflow instance: ${error.message}`);\n      // Continue without a workflow instance - we'll use the job_id directly\n    }\n\n    // Start the first step in the workflow - generate script\n    const generateScriptResponse = await callBackendAPI(\n      `${apiBaseUrl}/workflow/generate_script/${jobId}`,\n      { method: 'POST' },\n      request\n    );\n\n    // Check if the first step was started successfully\n    if (!generateScriptResponse.ok) {\n      const errorText = await generateScriptResponse.text();\n      console.error(`Failed to start script generation: ${errorText}`);\n\n      // We'll still return success with the job_id since the workflow was initialized\n      return new Response(JSON.stringify({\n        job_id: jobId,\n        workflow_id: workflowInstance ? workflowInstance.id : null,\n        status: \"initialized\",\n        warning: \"Failed to start script generation automatically\"\n      }), {\n        status: 200,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Return success response with job_id and workflow_id\n    return new Response(JSON.stringify({\n      job_id: jobId,\n      workflow_id: workflowInstance ? workflowInstance.id : null,\n      status: \"processing\",\n      message: \"Video generation workflow started\"\n    }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  } catch (error) {\n    console.error(`Error in handleGenerateVideo: ${error.message}`);\n    return new Response(JSON.stringify({\n      error: \"Failed to start video generation\",\n      message: error.message\n    }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n}\n\n/**\n * Handle checking the job status\n */\nasync function handleJobStatus(request, env, path, apiBaseUrl) {\n  try {\n    // Extract job_id from path\n    const pathParts = path.split('/');\n    const jobId = pathParts[pathParts.length - 1];\n\n    if (!jobId) {\n      return new Response(JSON.stringify({\n        error: \"Missing job_id in request path\"\n      }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    console.log(`Checking status for job: ${jobId}`);\n\n    // Call backend API to get job status\n    const statusResponse = await callBackendAPI(\n      `${apiBaseUrl}/workflow/status/${jobId}`,\n      { method: 'GET' },\n      request\n    );\n\n    if (!statusResponse.ok) {\n      const errorText = await statusResponse.text();\n      console.error(`Failed to get job status: ${statusResponse.status} - ${errorText}`);\n      return new Response(JSON.stringify({\n        error: \"Failed to get job status\",\n        details: errorText\n      }), {\n        status: statusResponse.status,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Parse status response\n    const statusData = await statusResponse.json();\n    console.log(`Job status: ${JSON.stringify(statusData)}`);\n\n    // Auto-advance workflow if a step is completed\n    if (statusData.status === \"processing\") {\n      await tryAdvanceWorkflow(jobId, statusData, apiBaseUrl, request);\n    }\n\n    // Return the status information\n    return new Response(JSON.stringify(statusData), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  } catch (error) {\n    console.error(`Error in handleJobStatus: ${error.message}`);\n    return new Response(JSON.stringify({\n      error: \"Failed to check job status\",\n      message: error.message\n    }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n}\n\n/**\n * Handle retrieving the completed video\n */\nasync function handleGetVideo(request, env, path, apiBaseUrl) {\n  try {\n    // Extract job_id from path\n    const pathParts = path.split('/');\n    const jobId = pathParts[pathParts.length - 1];\n\n    if (!jobId) {\n      return new Response(JSON.stringify({\n        error: \"Missing job_id in request path\"\n      }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    console.log(`Getting video for job: ${jobId}`);\n\n    // First, check job status to see if video is ready\n    const statusResponse = await callBackendAPI(\n      `${apiBaseUrl}/workflow/status/${jobId}`,\n      { method: 'GET' },\n      request\n    );\n\n    if (!statusResponse.ok) {\n      return new Response(JSON.stringify({\n        error: \"Failed to check job status\",\n        details: await statusResponse.text()\n      }), {\n        status: statusResponse.status,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    const statusData = await statusResponse.json();\n\n    // Check if the video is ready\n    if (statusData.status !== \"completed\") {\n      return new Response(JSON.stringify({\n        error: \"Video not ready\",\n        status: statusData.status,\n        steps: statusData.steps,\n        progress: statusData.progress\n      }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Get the video metadata\n    const videoFilename = statusData.final_video_details?.filename;\n    if (!videoFilename) {\n      return new Response(JSON.stringify({\n        error: \"Video filename not found in status\",\n        status: statusData\n      }), {\n        status: 404,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Redirect to video file endpoint\n    return new Response(JSON.stringify({\n      status: \"completed\",\n      video_url: `${apiBaseUrl}/videos/${videoFilename}`,\n      filename: videoFilename\n    }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  } catch (error) {\n    console.error(`Error in handleGetVideo: ${error.message}`);\n    return new Response(JSON.stringify({\n      error: \"Failed to get video\",\n      message: error.message\n    }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n}\n\n/**\n * Handle retrieving a video file directly\n */\nasync function handleVideoFile(request, env, path, apiBaseUrl) {\n  try {\n    // Extract filename from path\n    const pathParts = path.split('/');\n    const filename = pathParts[pathParts.length - 1];\n\n    if (!filename) {\n      return new Response(JSON.stringify({\n        error: \"Missing filename in request path\"\n      }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    console.log(`Getting video file: ${filename}`);\n\n    // Call backend API to get the video file\n    const videoResponse = await callBackendAPI(\n      `${apiBaseUrl}/videos/${filename}`,\n      { method: 'GET' },\n      request\n    );\n\n    if (!videoResponse.ok) {\n      return new Response(JSON.stringify({\n        error: \"Failed to get video file\",\n        details: await videoResponse.text()\n      }), {\n        status: videoResponse.status,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Return the video file as a streaming response\n    const headers = new Headers();\n    headers.set('Content-Type', 'video/mp4');\n    headers.set('Content-Disposition', `attachment; filename=\"${filename}\"`);\n\n    // Copy relevant headers from backend response\n    ['content-length', 'last-modified', 'etag'].forEach(header => {\n      const value = videoResponse.headers.get(header);\n      if (value) {\n        headers.set(header, value);\n      }\n    });\n\n    return new Response(videoResponse.body, {\n      status: 200,\n      headers: headers\n    });\n  } catch (error) {\n    console.error(`Error in handleVideoFile: ${error.message}`);\n    return new Response(JSON.stringify({\n      error: \"Failed to get video file\",\n      message: error.message\n    }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n}\n\n/**\n * Handle cleaning up resources for a job\n */\nasync function handleCleanup(request, env, path, apiBaseUrl) {\n  try {\n    // Extract job_id from path\n    const pathParts = path.split('/');\n    const jobId = pathParts[pathParts.length - 1];\n\n    if (!jobId) {\n      return new Response(JSON.stringify({\n        error: \"Missing job_id in request path\"\n      }), {\n        status: 400,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    console.log(`Cleaning up resources for job: ${jobId}`);\n\n    // Call backend API to cleanup resources\n    const cleanupResponse = await callBackendAPI(\n      `${apiBaseUrl}/cleanup/${jobId}`,\n      { method: 'DELETE' },\n      request\n    );\n\n    if (!cleanupResponse.ok) {\n      return new Response(JSON.stringify({\n        error: \"Failed to cleanup resources\",\n        details: await cleanupResponse.text()\n      }), {\n        status: cleanupResponse.status,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Parse cleanup response\n    const cleanupData = await cleanupResponse.json();\n\n    // Return the cleanup status\n    return new Response(JSON.stringify(cleanupData), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  } catch (error) {\n    console.error(`Error in handleCleanup: ${error.message}`);\n    return new Response(JSON.stringify({\n      error: \"Failed to cleanup resources\",\n      message: error.message\n    }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n}\n\n/**\n * Try to automatically advance the workflow based on current status\n */\nasync function tryAdvanceWorkflow(jobId, statusData, apiBaseUrl, request) {\n  try {\n    const steps = statusData.steps;\n\n    // Define the workflow steps from config\n    const workflowSteps = [\n      {\n        name: 'init',\n        endpoint: `/workflow/init`,\n        dependencies: []\n      },\n      {\n        name: 'generate_script',\n        endpoint: `/workflow/generate_script/${jobId}`,\n        dependencies: ['init']\n      },\n      {\n        name: 'generate_audio',\n        endpoint: `/workflow/generate_audio/${jobId}`,\n        dependencies: ['generate_script']\n      },\n      {\n        name: 'generate_base_video',\n        endpoint: `/workflow/generate_base_video/${jobId}`,\n        dependencies: ['generate_script']\n      },\n      {\n        name: 'generate_captions',\n        endpoint: `/workflow/generate_captions/${jobId}`,\n        dependencies: ['generate_audio']\n      },\n      {\n        name: 'combine_final_video',\n        endpoint: `/workflow/combine_final_video/${jobId}`,\n        dependencies: ['generate_base_video', 'generate_audio', 'generate_captions']\n      }\n    ];\n\n    // Map the steps from the backend to our workflow steps\n    const stepStatus = {\n      'init': 'completed', // Init is always completed at this point\n      'generate_script': steps.script,\n      'generate_audio': steps.audio,\n      'generate_base_video': steps.base_video,\n      'generate_captions': steps.captions,\n      'combine_final_video': steps.final_video\n    };\n\n    // Check each step to see if it should be started\n    for (const step of workflowSteps) {\n      // If this step is already completed or processing, skip it\n      if (stepStatus[step.name] === 'completed' || stepStatus[step.name] === 'processing') {\n        continue;\n      }\n\n      // Check if all dependencies are completed\n      const allDependenciesMet = step.dependencies.every(dep => stepStatus[dep] === 'completed');\n\n      if (allDependenciesMet) {\n        console.log(`Starting step: ${step.name}`);\n\n        // Start this step\n        const response = await callBackendAPI(\n          `${apiBaseUrl}${step.endpoint}`,\n          { method: 'POST' },\n          request\n        );\n\n        if (response.ok) {\n          console.log(`Successfully started step: ${step.name}`);\n        } else {\n          console.error(`Failed to start step ${step.name}: ${await response.text()}`);\n        }\n\n        // Only start one step at a time\n        break;\n      }\n    }\n  } catch (error) {\n    console.error(`Error in tryAdvanceWorkflow: ${error.message}`);\n  }\n}\n\n/**\n * Manually advance the workflow to the next step\n */\nasync function advanceWorkflow(jobId, apiBaseUrl, request) {\n  try {\n    // Get current status\n    const statusResponse = await callBackendAPI(\n      `${apiBaseUrl}/workflow/status/${jobId}`,\n      { method: 'GET' },\n      request\n    );\n\n    if (!statusResponse.ok) {\n      return new Response(JSON.stringify({\n        error: \"Failed to get workflow status\",\n        details: await statusResponse.text()\n      }), {\n        status: statusResponse.status,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    const statusData = await statusResponse.json();\n\n    // Try to advance the workflow\n    await tryAdvanceWorkflow(jobId, statusData, apiBaseUrl, request);\n\n    // Get updated status\n    const updatedStatusResponse = await callBackendAPI(\n      `${apiBaseUrl}/workflow/status/${jobId}`,\n      { method: 'GET' },\n      request\n    );\n\n    if (!updatedStatusResponse.ok) {\n      return new Response(JSON.stringify({\n        error: \"Failed to get updated workflow status\",\n        details: await updatedStatusResponse.text()\n      }), {\n        status: updatedStatusResponse.status,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    const updatedStatusData = await updatedStatusResponse.json();\n\n    return new Response(JSON.stringify({\n      message: \"Workflow advancement attempted\",\n      success: true,\n      status: updatedStatusData\n    }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  } catch (error) {\n    console.error(`Error in advanceWorkflow: ${error.message}`);\n    return new Response(JSON.stringify({\n      error: \"Failed to advance workflow\",\n      message: error.message\n    }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n}\n\n/**\n * Utility function to check backend health and debug API paths\n */\nasync function checkBackendHealth(apiBaseUrl) {\n  try {\n    console.log(\"Checking backend health at:\", apiBaseUrl);\n    const endpoints = [\n      \"/\",\n      \"/api\",\n      \"/api/video\",\n      \"/api/video/generate\"\n    ];\n\n    const results = {};\n\n    for (const endpoint of endpoints) {\n      try {\n        const url = `${apiBaseUrl}${endpoint}`;\n        console.log(`Checking endpoint: ${url}`);\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n\n        results[endpoint] = {\n          status: response.status,\n          ok: response.ok\n        };\n\n        // Try to get content type\n        try {\n          const contentType = response.headers.get('Content-Type');\n          if (contentType) {\n            results[endpoint].contentType = contentType;\n          }\n        } catch (e) {}\n\n      } catch (error) {\n        results[endpoint] = {\n          error: error.message\n        };\n      }\n    }\n\n    return results;\n  } catch (error) {\n    console.error(\"Error in health check:\", error);\n    return { error: error.message };\n  }\n}\n\n// Export the handler to make it available\nexport default {\n  /**\n   * Handle video workflow requests\n   */\n  fetch: async (request, env) => {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // Determine the API base URL from environment or query parameter\n    const apiBaseUrl = env.MODAL_ENDPOINT ||\n                        (url.hostname.includes('localhost') ? 'http://localhost:8000' :\n                         'https://berlayar-ai--wanx-backend-app-function.modal.run');\n\n    // Derive the workflow class name from the project name\n    const workflowClass = `${env.PROJECT_NAME || \"GIMME_AI_TEST\"}`.toUpperCase().replace(/-/g, '_') + \"_WORKFLOW\";\n\n    console.log(`Video workflow request to ${path}`);\n    console.log(`Using API Base URL: ${apiBaseUrl}`);\n    console.log(`Using workflow class: ${workflowClass}`);\n\n    // Route to the appropriate handler based on the path\n    if (path.startsWith('/generate_video_stream')) {\n      return handleGenerateVideo(request, env, workflowClass, apiBaseUrl);\n    } else if (path.startsWith('/job_status/')) {\n      return handleJobStatus(request, env, path, apiBaseUrl);\n    } else if (path.startsWith('/get_video/')) {\n      return handleGetVideo(request, env, path, apiBaseUrl);\n    } else if (path.startsWith('/videos/')) {\n      return handleVideoFile(request, env, path, apiBaseUrl);\n    } else if (path.startsWith('/cleanup/')) {\n      return handleCleanup(request, env, path, apiBaseUrl);\n    } else if (path.startsWith('/advance_workflow/')) {\n      const pathParts = path.split('/');\n      const jobId = pathParts[pathParts.length - 1];\n      return advanceWorkflow(jobId, apiBaseUrl, request);\n    } else if (path === '/debug') {\n      // Debug endpoint to help with troubleshooting\n      return new Response(JSON.stringify({\n        apiBaseUrl,\n        workflowClass,\n        availableBindings: Object.keys(env),\n        path,\n        healthCheck: await checkBackendHealth(apiBaseUrl)\n      }), {\n        status: 200,\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n\n    // Default response for unsupported paths\n    return new Response(JSON.stringify({\n      error: 'Unsupported video workflow endpoint',\n      path: path\n    }), {\n      status: 404,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};", "// Main Worker Script for API Gateway\n// Handles authentication, rate limiting, and request forwarding\nimport { IPRateLimiter, GlobalRateLimiter } from './durable_objects.js';\nimport { GimmeAiTestWorkflow, workflowHandler } from './workflow.js';\n\n\n// Export the workflow class to make it available to the runtime\nexport { GimmeAiTestWorkflow };\n\n\n// Configuration\nconst DEV_ENDPOINT = \"http://localhost:8000\";\nconst PROD_ENDPOINT = \"https://berlayar-ai--wanx-backend-app-function.modal.run\";\nconst ADMIN_PASSWORD_ENV = \"GIMME_ADMIN_PASSWORD\";\nconst PROJECT_NAME = \"gimme-ai-test\";\n\n// Required API Keys - these will be available in the worker environment:\n\n// - MODAL_TOKEN_ID\n\n// - MODAL_TOKEN_SECRET\n\n\n// Try to import project-specific handlers if they exist\nlet projectHandlers = null;\ntry {\n  projectHandlers = await import('./projects/gimme-ai-test/index.js');\n  console.log(`Successfully loaded project-specific handlers for ${PROJECT_NAME}`);\n} catch (e) {\n  console.log(`No project-specific handlers found for ${PROJECT_NAME}: ${e.message}`);\n}\n\n// Add this JWT utility function at the top of your file\nasync function createJWT(payload, secret) {\n  // Create the parts of the JWT\n  const header = { alg: \"HS256\", typ: \"JWT\" };\n\n  // Base64 encode the header and payload\n  const encodedHeader = btoa(JSON.stringify(header));\n  const encodedPayload = btoa(JSON.stringify(payload));\n\n  // Create the data to sign\n  const dataToSign = `${encodedHeader}.${encodedPayload}`;\n\n  // Convert secret to a key\n  const encoder = new TextEncoder();\n  const keyData = encoder.encode(secret);\n  const key = await crypto.subtle.importKey(\n    \"raw\", keyData, { name: \"HMAC\", hash: \"SHA-256\" }, false, [\"sign\"]\n  );\n\n  // Sign the data\n  const signature = await crypto.subtle.sign(\n    \"HMAC\", key, encoder.encode(dataToSign)\n  );\n\n  // Convert signature to base64\n  const signatureBase64 = btoa(String.fromCharCode(...new Uint8Array(signature)));\n\n  // Return the complete JWT\n  return `${encodedHeader}.${encodedPayload}.${signatureBase64}`;\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    // Handle CORS preflight requests\n    if (request.method === \"OPTIONS\") {\n      return handleCorsRequest();\n    }\n\n    // Extract request details\n    const url = new URL(request.url);\n    const path = url.pathname;\n    const clientIP = request.headers.get('CF-Connecting-IP') || '127.0.0.1';\n\n    // Determine environment (dev/prod)\n    const isDev = url.hostname.includes('localhost') || url.hostname.includes('127.0.0.1');\n    const backendUrl = isDev ? DEV_ENDPOINT : PROD_ENDPOINT;\n\n    if (!env.MODAL_ENDPOINT) {\n      env.MODAL_ENDPOINT = backendUrl;\n    }\n\n    // Step 1: Authentication check\n    const isAdmin = checkAdminAuth(request, env);\n\n    // Step 2: Handle special endpoints\n    const specialResponse = await handleSpecialEndpoints(request, env, path, isAdmin, clientIP);\n    if (specialResponse) {\n      return specialResponse;\n    }\n\n    // Step 3: Rate limiting check (skip for admin)\n    if (!isAdmin) {\n      const rateLimitResponse = await checkRateLimits(request, env, clientIP);\n      if (rateLimitResponse) {\n        return rateLimitResponse;\n      }\n    }\n\n    // Step 4: Route workflow-related requests\n    // Check if this is a workflow-related request\n    if (path.startsWith('/workflow') ||\n        path.startsWith('/generate_video_stream') ||\n        path.startsWith('/job_status/') ||\n        path.startsWith('/get_video/')) {\n      try {\n        // Create a modified request with auth headers if it passed authentication\n        const modifiedRequest = new Request(request);\n        if (isAdmin) {\n          // Add admin auth headers\n          modifiedRequest.headers.set('X-Auth-Mode', 'admin');\n          modifiedRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n          modifiedRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n          // Add API keys as headers\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n          \n        } else {\n          // Add free tier auth headers\n          modifiedRequest.headers.set('X-Auth-Mode', 'free');\n          modifiedRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n          modifiedRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n          // Add API keys as headers\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n          \n        }\n\n        console.log(\"Routing to workflow handler:\", path);\n        console.log(\"Auth mode:\", isAdmin ? \"admin\" : \"free\");\n\n        // Use the imported workflowHandler with our modified request\n        return workflowHandler.fetch(modifiedRequest, env);\n      } catch (error) {\n        console.error('Error handling workflow request:', error);\n        return new Response(JSON.stringify({\n          error: 'Workflow handler error',\n          message: String(error)\n        }), {\n          status: 500,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        });\n      }\n    }\n\n    // Step 5: All other requests - use project-specific or default handlers\n    if (projectHandlers && projectHandlers.default && typeof projectHandlers.default.handleRequest === 'function') {\n      // Use project-specific handler\n      try {\n        return await projectHandlers.default.handleRequest(request, env, ctx, {\n          isAdmin,\n          backendUrl,\n          clientIP\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({\n          error: \"Project handler error\",\n          message: error.message\n        }), {\n          status: 500,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        });\n      }\n    } else {\n      // Use default handler\n      return isAdmin ?\n        handleAdminRequest(request, backendUrl, env) :\n        handleFreeRequest(request, backendUrl, env);\n    }\n  }\n};\n\n// Check if request has admin authentication\nfunction checkAdminAuth(request, env) {\n  const authHeader = request.headers.get('Authorization') || '';\n\n  if (authHeader.startsWith('Bearer ')) {\n    const token = authHeader.substring(7);\n    if (token === env[ADMIN_PASSWORD_ENV]) {\n      return true;\n    } else {\n      // Invalid token provided, but we'll handle this in special endpoints\n      return false;\n    }\n  }\n\n  return false;\n}\n\n// Handle special endpoints like status, test, auth errors\nasync function handleSpecialEndpoints(request, env, path, isAdmin, clientIP) {\n  const authHeader = request.headers.get('Authorization') || '';\n\n  // Handle auth errors\n  if (authHeader.startsWith('Bearer ') && !isAdmin) {\n    return new Response(JSON.stringify({\n      error: \"Authentication failed\",\n      message: \"Invalid authentication token\",\n      status: 401\n    }), {\n      status: 401,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"WWW-Authenticate\": \"Bearer\"\n      }\n    });\n  }\n\n  // Handle status endpoint\n  if (path === \"/status\" || path === \"/api/status\") {\n    return handleStatusRequest(env, clientIP, isAdmin);\n  }\n\n  // Handle test endpoint\n  if (path === \"/api/test\") {\n    if (isAdmin) {\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Test endpoint successful\",\n        auth: \"admin\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    } else {\n      // For free tier, we'll check rate limits later and then return this\n      // We don't return here so rate limiting can be applied\n    }\n  }\n\n  // Handle admin reset endpoint\n  if (path === \"/admin/reset-limits\" && isAdmin) {\n    try {\n      // Reset IP limiter for the current IP\n      const ipLimiterObj = env.IP_LIMITER.get(env.IP_LIMITER.idFromName(clientIP));\n      await ipLimiterObj.fetch(new URL(\"/reset\", request.url));\n\n      // Reset global limiter\n      const globalLimiterObj = env.GLOBAL_LIMITER.get(env.GLOBAL_LIMITER.idFromName('global'));\n      await globalLimiterObj.fetch(new URL(\"/reset\", request.url));\n\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Rate limits reset successfully\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    } catch (error) {\n      return new Response(JSON.stringify({\n        error: \"Reset failed\",\n        message: error.message\n      }), {\n        status: 500,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n  }\n\n  // No special endpoint matched\n  return null;\n}\n\n// Check rate limits for free tier\nasync function checkRateLimits(request, env, clientIP) {\n  try {\n    const url = new URL(request.url);\n    const path = url.pathname;\n    const testIP = request.headers.get('X-Test-IP');\n    const effectiveIP = testIP || clientIP;\n\n    // Log request information\n    console.log({\n      event: \"rate_limit_check\",\n      client_ip: clientIP,\n      effective_ip: effectiveIP,\n      path: path,\n      method: request.method,\n      timestamp: new Date().toISOString()\n    });\n\n    // Check IP-specific rate limit\n    const ipLimiterObj = env.IP_LIMITER.get(env.IP_LIMITER.idFromName(effectiveIP));\n    const ipLimiterResp = await ipLimiterObj.fetch(request.url);\n\n    if (!ipLimiterResp.ok) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        limit_type: \"per_ip\",\n        client_ip: effectiveIP,\n        path: path,\n        timestamp: new Date().toISOString()\n      });\n      return ipLimiterResp; // Return rate limit exceeded error\n    }\n\n    // Check global rate limit\n    const globalLimiterObj = env.GLOBAL_LIMITER.get(env.GLOBAL_LIMITER.idFromName('global'));\n    const globalLimiterResp = await globalLimiterObj.fetch(request.url);\n\n    if (!globalLimiterResp.ok) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        limit_type: \"global\",\n        client_ip: effectiveIP,\n        path: path,\n        timestamp: new Date().toISOString()\n      });\n      return globalLimiterResp; // Return rate limit exceeded error\n    }\n\n    // Handle test endpoint response after rate limiting\n    if (url.pathname === \"/api/test\") {\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Test endpoint successful\",\n        auth: \"free\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n\n    // Rate limits passed, no response needed\n    return null;\n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: \"Gateway error\",\n      message: \"An error occurred checking rate limits\",\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n  }\n}\n\n// Handle requests with admin privileges\nasync function handleAdminRequest(request, backendUrl, env) {\n  try {\n    // Clone the request to modify it\n    const url = new URL(request.url);\n\n    // Log the environment variables for debugging\n    console.log({\n      event: \"admin_request\",\n      modal_endpoint: env.MODAL_ENDPOINT || backendUrl,\n      jwt_secret_present: !!env.SHARED_JWT_SECRET\n    });\n\n    // Create new request to backend\n    const backendRequest = new Request(`${env.MODAL_ENDPOINT || backendUrl}${url.pathname}${url.search}`, {\n      method: request.method,\n      headers: new Headers(request.headers),\n      body: request.body\n    });\n\n    // Create JWT payload\n    const jwtPayload = {\n      iss: \"gimme-ai-gateway\",\n      sub: PROJECT_NAME,\n      exp: Math.floor(Date.now() / 1000) + 300, // 5 minutes expiration\n      iat: Math.floor(Date.now() / 1000),\n      mode: \"admin\",\n      jti: crypto.randomUUID() // Unique token ID to prevent replay\n    };\n\n    // Sign the JWT\n    const jwt = await createJWT(jwtPayload, env.SHARED_JWT_SECRET);\n\n    // Add JWT to Authorization header\n    backendRequest.headers.set('Authorization', `Bearer ${jwt}`);\n\n    // Add auth state to headers (for backward compatibility)\n    backendRequest.headers.set('X-Auth-Mode', 'admin');\n    backendRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n    backendRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n    // Add API keys as headers - they are pulled from the env\n    \n    backendRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n    \n    backendRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n    \n\n    // Log the headers for debugging\n    console.log({\n      event: \"request_headers\",\n      headers: Object.fromEntries([...backendRequest.headers.entries()])\n    });\n\n    // Forward to backend and return response\n    const response = await fetch(backendRequest);\n\n    // Log the response status for debugging\n    console.log({\n      event: \"response_received\",\n      status: response.status,\n      statusText: response.statusText\n    });\n\n    // Clone the response to add CORS headers\n    const corsResponse = new Response(response.body, response);\n    corsResponse.headers.set('Access-Control-Allow-Origin', '*');\n    corsResponse.headers.set('X-Powered-By', 'Gimme-AI Gateway');\n\n    return corsResponse;\n  } catch (error) {\n    console.error({\n      event: \"request_error\",\n      error: error.message,\n      stack: error.stack\n    });\n\n    return new Response(JSON.stringify({\n      error: \"Gateway error\",\n      message: \"Error forwarding request to backend\",\n      details: error.message\n    }), {\n      status: 502,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n  }\n}\n\n// Handle requests with free tier access\nasync function handleFreeRequest(request, backendUrl, env) {\n  try {\n    // Clone the request\n    const url = new URL(request.url);\n\n    // Create new request to backend\n    const backendRequest = new Request(`${backendUrl}${url.pathname}${url.search}`, {\n      method: request.method,\n      headers: new Headers(request.headers),\n      body: request.body\n    });\n\n    // Create JWT payload\n    const jwtPayload = {\n      iss: \"gimme-ai-gateway\",\n      sub: PROJECT_NAME,\n      exp: Math.floor(Date.now() / 1000) + 300, // 5 minutes expiration\n      iat: Math.floor(Date.now() / 1000),\n      mode: \"free\",\n      jti: crypto.randomUUID() // Unique token ID to prevent replay\n    };\n\n    // Sign the JWT\n    const jwt = await createJWT(jwtPayload, env.SHARED_JWT_SECRET);\n\n    // Add JWT to Authorization header\n    backendRequest.headers.set('Authorization', `Bearer ${jwt}`);\n\n    // Add auth state to headers (for backward compatibility)\n    backendRequest.headers.set('X-Auth-Mode', 'free');\n    backendRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n    backendRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n    // Add API keys as headers - they are pulled from the env\n    \n    backendRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n    \n    backendRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n    \n\n    // Forward to backend and return response\n    const response = await fetch(backendRequest);\n\n    // Clone the response to add CORS headers\n    const corsResponse = new Response(response.body, response);\n    corsResponse.headers.set('Access-Control-Allow-Origin', '*');\n    corsResponse.headers.set('X-Powered-By', 'Gimme-AI Gateway');\n\n    return corsResponse;\n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: \"Gateway error\",\n      message: \"Error forwarding request to backend\",\n      details: error.message\n    }), {\n      status: 502,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n  }\n}\n\n// Handle CORS preflight requests\nfunction handleCorsRequest() {\n  return new Response(null, {\n    status: 204,\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n      \"Access-Control-Max-Age\": \"86400\"\n    }\n  });\n}\n\n// Handle status requests\nfunction handleStatusRequest(env, clientIP, isAdmin) {\n  const mode = isAdmin ? \"admin\" : \"free\";\n  const limit = isAdmin ? \"unlimited\" : \"5\";\n\n  return new Response(JSON.stringify({\n    status: \"online\",\n    project: PROJECT_NAME,\n    mode: mode,\n    rate_limit: limit,\n    client_ip: clientIP,\n    timestamp: new Date().toISOString()\n  }), {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"X-Powered-By\": \"Gimme-AI Gateway\"\n    }\n  });\n}\n\n// Export only the rate limiters (removed duplicate workflow export)\nexport { IPRateLimiter, GlobalRateLimiter };"],
  "mappings": "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",
  "names": ["apiBaseUrl", "workflowSteps"]
}
