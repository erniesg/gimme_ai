{
  "version": 3,
  "sources": ["../durable_objects.js", "../workflow.js", "../handlers/api_workflow.js", "../worker.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["// Rate Limiter Durable Object for IP-based and global rate limiting\n\nexport class IPRateLimiter {\n  constructor(state, env) {\n    this.state = state;\n    this.storage = state.storage;\n    this.env = env;\n    this.limit = 5;\n    this.rateWindow = \"lifetime\";\n  }\n\n  async fetch(request) {\n    const url = new URL(request.url);\n\n    // Add reset functionality\n    if (url.pathname === \"/reset\") {\n      await this.storage.delete(\"count\");\n      console.log({\n        event: \"rate_limit_reset\",\n        type: \"per_ip\",\n        ip: url.hostname,\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"IP rate limiter reset successfully\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n\n    const count = await this.storage.get(\"count\") || 0;\n\n    // Check if the limit has been reached\n    if (count >= this.limit) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        type: \"per_ip\",\n        ip: url.hostname,\n        count: count,\n        limit: this.limit,\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        error: \"Rate limit exceeded\",\n        limit: this.limit,\n        type: \"per_ip\",\n        window: this.rateWindow,\n        message: \"You have exceeded the per-IP rate limit for the free tier\"\n      }), {\n        status: 429,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-RateLimit-Limit\": this.limit,\n          \"X-RateLimit-Remaining\": 0,\n          \"X-RateLimit-Reset\": \"n/a\",\n          \"X-RateLimit-Window\": this.rateWindow,\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n        }\n      });\n    }\n\n    // Increment the counter\n    await this.storage.put(\"count\", count + 1);\n    console.log({\n      event: \"rate_limit_increment\",\n      type: \"per_ip\",\n      ip: url.hostname,\n      count: count + 1,\n      limit: this.limit,\n      remaining: this.limit - (count + 1),\n      timestamp: new Date().toISOString()\n    });\n\n    // Return success\n    return new Response(JSON.stringify({\n      success: true,\n      used: count + 1,\n      remaining: this.limit - (count + 1),\n      limit: this.limit,\n      window: this.rateWindow,\n      type: \"per_ip\"\n    }), {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-RateLimit-Limit\": this.limit,\n        \"X-RateLimit-Remaining\": this.limit - (count + 1),\n        \"X-RateLimit-Window\": this.rateWindow,\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n      }\n    });\n  }\n}\n\nexport class GlobalRateLimiter {\n  constructor(state, env) {\n    this.state = state;\n    this.storage = state.storage;\n    this.env = env;\n    this.limit = 10;\n    this.rateWindow = \"lifetime\";\n  }\n\n  async fetch(request) {\n    const url = new URL(request.url);\n\n    // Add reset functionality\n    if (url.pathname === \"/reset\") {\n      await this.storage.delete(\"count\");\n      console.log({\n        event: \"rate_limit_reset\",\n        type: \"global\",\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Global rate limiter reset successfully\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n\n    const count = await this.storage.get(\"count\") || 0;\n\n    // Check if the limit has been reached\n    if (count >= this.limit) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        type: \"global\",\n        count: count,\n        limit: this.limit,\n        timestamp: new Date().toISOString()\n      });\n      return new Response(JSON.stringify({\n        error: \"Global rate limit exceeded\",\n        limit: this.limit,\n        type: \"global\",\n        window: this.rateWindow,\n        message: \"The free tier global rate limit has been reached\"\n      }), {\n        status: 429,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-RateLimit-Limit\": this.limit,\n          \"X-RateLimit-Remaining\": 0,\n          \"X-RateLimit-Reset\": \"n/a\",\n          \"X-RateLimit-Window\": this.rateWindow,\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n        }\n      });\n    }\n\n    // Increment the counter\n    await this.storage.put(\"count\", count + 1);\n    console.log({\n      event: \"rate_limit_increment\",\n      type: \"global\",\n      count: count + 1,\n      limit: this.limit,\n      remaining: this.limit - (count + 1),\n      timestamp: new Date().toISOString()\n    });\n\n    // Return success\n    return new Response(JSON.stringify({\n      success: true,\n      used: count + 1,\n      remaining: this.limit - (count + 1),\n      limit: this.limit,\n      window: this.rateWindow,\n      type: \"global\"\n    }), {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-RateLimit-Limit\": this.limit,\n        \"X-RateLimit-Remaining\": this.limit - (count + 1),\n        \"X-RateLimit-Window\": this.rateWindow,\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n      }\n    });\n  }\n}", "// Workflow template for gimme-ai-test\nimport { WorkflowEntrypoint } from 'cloudflare:workers';\nimport * as WorkflowUtils from './workflow_utils.js';\n\n// Import specialized handlers\n\nimport apiWorkflowHandler from './handlers/api_workflow.js';\n\n\n// Workflow configuration - this will be replaced with actual config during deployment\nconst WORKFLOW_CONFIG = {\n  type: \"api\",\n  steps: [],\n  defaults: {\n    retry_limit: 3,\n    timeout: \"5m\",\n    polling_interval: \"5s\",\n    method: \"POST\"\n  },\n  endpoints: {\n    dev: \"http://localhost:8000\",\n    prod: \"https://berlayar-ai--wanx-backend-app-function.modal.run\"\n  }\n};\n\n/**\n * GimmeAiTestWorkflow - A workflow for gimme-ai-test\n */\nexport class GimmeAiTestWorkflow extends WorkflowEntrypoint {\n  /**\n   * Run the workflow\n   */\n  async run(event, step) {\n    // Extensive logging to understand what's happening\n    console.log(\"==================== DEBUG START ====================\");\n    console.log(\"WORKFLOW RUN STARTED\");\n    console.log(\"Full payload:\", JSON.stringify(event.payload));\n    console.log(\"Workflow config:\", JSON.stringify(WORKFLOW_CONFIG));\n\n    // Initialize state with whatever came in the request\n    const state = {\n      ...event.payload,\n      requestId: event.payload.requestId || crypto.randomUUID(),\n      startTime: new Date().toISOString()\n    };\n\n    console.log(`Starting workflow: ${state.requestId} (type: ${state.workflow_type || 'unknown'})`);\n    console.log(\"Available environment variables:\", Object.keys(this.env));\n\n    // Execute one explicit step for testing\n    try {\n      console.log(\"Attempting to execute a test step...\");\n      const testResult = await step.do(\n        'test_step',\n        { timeout: \"30s\" },\n        async () => {\n          console.log(\"Inside test step - sleeping for 5 seconds to test timing\");\n          await new Promise(resolve => setTimeout(resolve, 5000));\n          console.log(\"Test step completed\");\n          return { status: \"test_completed\" };\n        }\n      );\n      console.log(\"Test step result:\", JSON.stringify(testResult));\n    } catch (error) {\n      console.error(\"Error in test step:\", error);\n    }\n\n    // Skip actual implementation for now, just return debug info\n    console.log(\"==================== DEBUG END ====================\");\n\n    return {\n      status: \"debug_completed\",\n      workflow_type: state.workflow_type,\n      requestId: state.requestId,\n      config_steps: WORKFLOW_CONFIG.steps ? WORKFLOW_CONFIG.steps.map(s => s.name) : [],\n      debug_time: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Get request body for a step\n   */\n  getRequestBody(stepName, state) {\n    // Determine if this is a video or API workflow based on URL path or payload properties\n    const isVideoWorkflow = state.workflow_type === 'video' ||\n                             state.content && state.options && !state.instanceId;\n\n    // For the first step, include the full payload\n    if (stepName === WORKFLOW_CONFIG.steps[0]?.name) {\n      // For video workflow, use specific format\n      if (isVideoWorkflow) {\n        return {\n          content: state.content,\n          options: state.options || {}\n        };\n      }\n      // For API workflow, pass through all parameters\n      return {\n        ...state\n      };\n    }\n\n    // For subsequent steps, include minimal information\n    return {\n      requestId: state.requestId,\n      job_id: state.job_id || state.instanceId\n    };\n  }\n}\n\n/**\n * HTTP handler for workflow requests\n */\nexport const workflowHandler = {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    console.log(\"Workflow handler received path:\", path);\n\n    // Set project name in env for handlers to use\n    env.PROJECT_NAME = \"gimme-ai-test\";\n\n    // Handle workflow API route\n    if (path.startsWith('/workflow')) {\n      // Handle via API workflow handler\n      return apiWorkflowHandler.fetch(request, env);\n    }\n\n    // Handle video workflow routes\n    if (path.startsWith('/generate_video_stream') ||\n        path.startsWith('/job_status/') ||\n        path.startsWith('/get_video/') ||\n        path.startsWith('/videos/') ||\n        path.startsWith('/cleanup/')) {\n      return videoWorkflowHandler.fetch(request, env);\n    }\n\n    // No handler matched\n    return new Response(JSON.stringify({\n      error: \"Workflow endpoint not found\",\n      path: path\n    }), {\n      status: 404,\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n};\n\n/**\n * Default workflow request handler (backwards compatible)\n */\nasync function defaultWorkflowRequestHandler(request, env, workflowClass, workflowType) {\n  const url = new URL(request.url);\n\n  if (!url.pathname.startsWith('/workflow')) {\n    return new Response('Not found', { status: 404 });\n  }\n\n  // Check for status requests\n  const instanceId = url.searchParams.get('instanceId');\n  if (instanceId) {\n    try {\n      const instance = await env[workflowClass].get(instanceId);\n      const status = await instance.status();\n      return Response.json({ status });\n    } catch (error) {\n      return Response.json({\n        error: 'Invalid instance ID',\n        message: String(error)\n      }, { status: 404 });\n    }\n  }\n\n  // Create new workflow instance\n  let params = {};\n  if (request.method === 'POST') {\n    try {\n      params = await request.json();\n    } catch (e) {\n      return Response.json({\n        error: 'Invalid JSON',\n        message: String(e)\n      }, { status: 400 });\n    }\n  }\n\n  // Add requestId if not provided\n  if (!params.requestId) {\n    params.requestId = crypto.randomUUID();\n  }\n\n  try {\n    const instance = await env[workflowClass].create({\n      ...params,\n      requestId: params.requestId,\n      workflow_type: workflowType || 'api'\n    });\n    return Response.json({\n      success: true,\n      instanceId: instance.id,\n      requestId: params.requestId,\n      message: 'Workflow started'\n    });\n  } catch (error) {\n    console.error(\"Workflow creation error:\", error, \"Class:\", workflowClass, \"Available bindings:\", Object.keys(env));\n    return Response.json({\n      success: false,\n      error: 'Failed to start workflow',\n      message: String(error),\n      availableBindings: Object.keys(env)\n    }, { status: 500 });\n  }\n}\n\n// Helper function to parse time strings like \"5s\" to milliseconds\nfunction parseTimeString(timeStr) {\n  const match = timeStr.match(/^(\\d+)([smh])$/);\n  if (!match) return 5000; // Default to 5 seconds\n\n  const [_, value, unit] = match;\n  const numValue = parseInt(value, 10);\n\n  switch (unit) {\n    case 's': return numValue * 1000;\n    case 'm': return numValue * 60 * 1000;\n    case 'h': return numValue * 60 * 60 * 1000;\n    default: return 5000;\n  }\n}", "/**\n * Simple API Workflow Handler\n * Provides basic API orchestration for simpler workflows\n */\nimport * as WorkflowUtils from '../workflow_utils.js';\n\n// Expose the handler to the global scope\nglobalThis.apiWorkflowHandler = {\n  /**\n   * Process workflow-related requests\n   * @param {Request} request - The incoming HTTP request\n   * @param {Object} env - Environment variables and bindings\n   * @param {Object} workflowConfig - Configuration for this workflow\n   * @param {string} workflowClass - Cloudflare workflow class name\n   * @returns {Response} - HTTP response\n   */\n  processWorkflowRequest: async (request, env, workflowConfig, workflowClass) => {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    console.log(`Simple API workflow request to ${path}`);\n\n    // Only handle /workflow requests\n    if (!path.startsWith('/workflow')) {\n      return new Response('Not found', { status: 404 });\n    }\n\n    // Handle workflow creation\n    if (path === '/workflow' && request.method === 'POST') {\n      return await handleCreateWorkflow(request, env, workflowClass);\n    }\n\n    // Handle workflow status\n    const instanceId = url.searchParams.get('instanceId');\n    if (instanceId) {\n      return await handleWorkflowStatus(request, env, workflowClass, instanceId);\n    }\n\n    // Default response for unsupported paths\n    return new Response(JSON.stringify({\n      error: 'Unsupported API workflow endpoint',\n      path: path\n    }), {\n      status: 404,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};\n\n/**\n * Handle creating a new workflow instance\n */\nasync function handleCreateWorkflow(request, env, workflowClass) {\n  try {\n    // Parse request body\n    const body = await request.json();\n\n    // Generate a request ID if not provided\n    const requestId = body.requestId || crypto.randomUUID();\n\n    console.log(`Starting simple API workflow for request ${requestId}`);\n\n    // Create workflow instance\n    const workflowInstance = await env[workflowClass].create({\n      ...body,\n      requestId: requestId\n    });\n\n    return new Response(JSON.stringify({\n      success: true,\n      instanceId: workflowInstance.id,\n      requestId: requestId,\n      message: 'Workflow started'\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error starting workflow:', error);\n    return new Response(JSON.stringify({\n      error: 'Failed to start workflow',\n      message: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Handle checking workflow status\n */\nasync function handleWorkflowStatus(request, env, workflowClass, instanceId) {\n  try {\n    console.log(`Checking workflow status for ${instanceId}`);\n\n    // Get workflow instance\n    const instance = await env[workflowClass].get(instanceId);\n    const status = await instance.status();\n\n    return new Response(JSON.stringify({\n      status: status\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Error checking workflow status:', error);\n    return new Response(JSON.stringify({\n      error: 'Failed to check workflow status',\n      message: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Export the handler\nexport default {\n  fetch: async (request, env) => {\n    const workflowClass = `${env.PROJECT_NAME || \"{{ project_name }}\"}`.toUpperCase().replace(/-/g, '_') + \"_WORKFLOW\";\n    return apiWorkflowHandler.processWorkflowRequest(request, env, null, workflowClass);\n  }\n};\n", "// Main Worker Script for API Gateway\n// Handles authentication, rate limiting, and request forwarding\nimport { IPRateLimiter, GlobalRateLimiter } from './durable_objects.js';\nimport { GimmeAiTestWorkflow, workflowHandler } from './workflow.js';\n\n\n// Export the workflow class to make it available to the runtime\nexport { GimmeAiTestWorkflow };\n\n\n// Configuration\nconst DEV_ENDPOINT = \"http://localhost:8000\";\nconst PROD_ENDPOINT = \"https://berlayar-ai--wanx-backend-app-function.modal.run\";\nconst ADMIN_PASSWORD_ENV = \"GIMME_ADMIN_PASSWORD\";\nconst PROJECT_NAME = \"gimme-ai-test\";\n\n// Required API Keys - these will be available in the worker environment:\n\n// - MODAL_TOKEN_ID\n\n// - MODAL_TOKEN_SECRET\n\n\n// Try to import project-specific handlers if they exist\nlet projectHandlers = null;\ntry {\n  projectHandlers = await import('./projects/gimme-ai-test/index.js');\n  console.log(`Successfully loaded project-specific handlers for ${PROJECT_NAME}`);\n} catch (e) {\n  console.log(`No project-specific handlers found for ${PROJECT_NAME}: ${e.message}`);\n}\n\n// Add this JWT utility function at the top of your file\nasync function createJWT(payload, secret) {\n  // Create the parts of the JWT\n  const header = { alg: \"HS256\", typ: \"JWT\" };\n\n  // Base64 encode the header and payload\n  const encodedHeader = btoa(JSON.stringify(header));\n  const encodedPayload = btoa(JSON.stringify(payload));\n\n  // Create the data to sign\n  const dataToSign = `${encodedHeader}.${encodedPayload}`;\n\n  // Convert secret to a key\n  const encoder = new TextEncoder();\n  const keyData = encoder.encode(secret);\n  const key = await crypto.subtle.importKey(\n    \"raw\", keyData, { name: \"HMAC\", hash: \"SHA-256\" }, false, [\"sign\"]\n  );\n\n  // Sign the data\n  const signature = await crypto.subtle.sign(\n    \"HMAC\", key, encoder.encode(dataToSign)\n  );\n\n  // Convert signature to base64\n  const signatureBase64 = btoa(String.fromCharCode(...new Uint8Array(signature)));\n\n  // Return the complete JWT\n  return `${encodedHeader}.${encodedPayload}.${signatureBase64}`;\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    // Handle CORS preflight requests\n    if (request.method === \"OPTIONS\") {\n      return handleCorsRequest();\n    }\n\n    // Extract request details\n    const url = new URL(request.url);\n    const path = url.pathname;\n    const clientIP = request.headers.get('CF-Connecting-IP') || '127.0.0.1';\n\n    // Determine environment (dev/prod)\n    const isDev = url.hostname.includes('localhost') || url.hostname.includes('127.0.0.1');\n    const backendUrl = isDev ? DEV_ENDPOINT : PROD_ENDPOINT;\n\n    if (!env.MODAL_ENDPOINT) {\n      env.MODAL_ENDPOINT = backendUrl;\n    }\n\n    // Step 1: Authentication check\n    const isAdmin = checkAdminAuth(request, env);\n\n    // Step 2: Handle special endpoints\n    const specialResponse = await handleSpecialEndpoints(request, env, path, isAdmin, clientIP);\n    if (specialResponse) {\n      return specialResponse;\n    }\n\n    // Step 3: Rate limiting check (skip for admin)\n    if (!isAdmin) {\n      const rateLimitResponse = await checkRateLimits(request, env, clientIP);\n      if (rateLimitResponse) {\n        return rateLimitResponse;\n      }\n    }\n\n    // Step 4: Route workflow-related requests\n    // Check if this is a workflow-related request\n    if (path.startsWith('/workflow') ||\n        path.startsWith('/generate_video_stream') ||\n        path.startsWith('/job_status/') ||\n        path.startsWith('/get_video/')) {\n      try {\n        // Create a modified request with auth headers if it passed authentication\n        const modifiedRequest = new Request(request);\n        if (isAdmin) {\n          // Add admin auth headers\n          modifiedRequest.headers.set('X-Auth-Mode', 'admin');\n          modifiedRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n          modifiedRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n          // Add API keys as headers\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n          \n        } else {\n          // Add free tier auth headers\n          modifiedRequest.headers.set('X-Auth-Mode', 'free');\n          modifiedRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n          modifiedRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n          // Add API keys as headers\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n          \n          modifiedRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n          \n        }\n\n        console.log(\"Routing to workflow handler:\", path);\n        console.log(\"Auth mode:\", isAdmin ? \"admin\" : \"free\");\n\n        // Use the imported workflowHandler with our modified request\n        return workflowHandler.fetch(modifiedRequest, env);\n      } catch (error) {\n        console.error('Error handling workflow request:', error);\n        return new Response(JSON.stringify({\n          error: 'Workflow handler error',\n          message: String(error)\n        }), {\n          status: 500,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        });\n      }\n    }\n\n    // Step 5: All other requests - use project-specific or default handlers\n    if (projectHandlers && projectHandlers.default && typeof projectHandlers.default.handleRequest === 'function') {\n      // Use project-specific handler\n      try {\n        return await projectHandlers.default.handleRequest(request, env, ctx, {\n          isAdmin,\n          backendUrl,\n          clientIP\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({\n          error: \"Project handler error\",\n          message: error.message\n        }), {\n          status: 500,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        });\n      }\n    } else {\n      // Use default handler\n      return isAdmin ?\n        handleAdminRequest(request, backendUrl, env) :\n        handleFreeRequest(request, backendUrl, env);\n    }\n  }\n};\n\n// Check if request has admin authentication\nfunction checkAdminAuth(request, env) {\n  const authHeader = request.headers.get('Authorization') || '';\n\n  if (authHeader.startsWith('Bearer ')) {\n    const token = authHeader.substring(7);\n    if (token === env[ADMIN_PASSWORD_ENV]) {\n      return true;\n    } else {\n      // Invalid token provided, but we'll handle this in special endpoints\n      return false;\n    }\n  }\n\n  return false;\n}\n\n// Handle special endpoints like status, test, auth errors\nasync function handleSpecialEndpoints(request, env, path, isAdmin, clientIP) {\n  const authHeader = request.headers.get('Authorization') || '';\n\n  // Handle auth errors\n  if (authHeader.startsWith('Bearer ') && !isAdmin) {\n    return new Response(JSON.stringify({\n      error: \"Authentication failed\",\n      message: \"Invalid authentication token\",\n      status: 401\n    }), {\n      status: 401,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"WWW-Authenticate\": \"Bearer\"\n      }\n    });\n  }\n\n  // Handle status endpoint\n  if (path === \"/status\" || path === \"/api/status\") {\n    return handleStatusRequest(env, clientIP, isAdmin);\n  }\n\n  // Handle test endpoint\n  if (path === \"/api/test\") {\n    if (isAdmin) {\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Test endpoint successful\",\n        auth: \"admin\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    } else {\n      // For free tier, we'll check rate limits later and then return this\n      // We don't return here so rate limiting can be applied\n    }\n  }\n\n  // Handle admin reset endpoint\n  if (path === \"/admin/reset-limits\" && isAdmin) {\n    try {\n      // Reset IP limiter for the current IP\n      const ipLimiterObj = env.IP_LIMITER.get(env.IP_LIMITER.idFromName(clientIP));\n      await ipLimiterObj.fetch(new URL(\"/reset\", request.url));\n\n      // Reset global limiter\n      const globalLimiterObj = env.GLOBAL_LIMITER.get(env.GLOBAL_LIMITER.idFromName('global'));\n      await globalLimiterObj.fetch(new URL(\"/reset\", request.url));\n\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Rate limits reset successfully\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    } catch (error) {\n      return new Response(JSON.stringify({\n        error: \"Reset failed\",\n        message: error.message\n      }), {\n        status: 500,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n  }\n\n  // No special endpoint matched\n  return null;\n}\n\n// Check rate limits for free tier\nasync function checkRateLimits(request, env, clientIP) {\n  try {\n    const url = new URL(request.url);\n    const path = url.pathname;\n    const testIP = request.headers.get('X-Test-IP');\n    const effectiveIP = testIP || clientIP;\n\n    // Log request information\n    console.log({\n      event: \"rate_limit_check\",\n      client_ip: clientIP,\n      effective_ip: effectiveIP,\n      path: path,\n      method: request.method,\n      timestamp: new Date().toISOString()\n    });\n\n    // Check IP-specific rate limit\n    const ipLimiterObj = env.IP_LIMITER.get(env.IP_LIMITER.idFromName(effectiveIP));\n    const ipLimiterResp = await ipLimiterObj.fetch(request.url);\n\n    if (!ipLimiterResp.ok) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        limit_type: \"per_ip\",\n        client_ip: effectiveIP,\n        path: path,\n        timestamp: new Date().toISOString()\n      });\n      return ipLimiterResp; // Return rate limit exceeded error\n    }\n\n    // Check global rate limit\n    const globalLimiterObj = env.GLOBAL_LIMITER.get(env.GLOBAL_LIMITER.idFromName('global'));\n    const globalLimiterResp = await globalLimiterObj.fetch(request.url);\n\n    if (!globalLimiterResp.ok) {\n      console.log({\n        event: \"rate_limit_exceeded\",\n        limit_type: \"global\",\n        client_ip: effectiveIP,\n        path: path,\n        timestamp: new Date().toISOString()\n      });\n      return globalLimiterResp; // Return rate limit exceeded error\n    }\n\n    // Handle test endpoint response after rate limiting\n    if (url.pathname === \"/api/test\") {\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Test endpoint successful\",\n        auth: \"free\"\n      }), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n    }\n\n    // Rate limits passed, no response needed\n    return null;\n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: \"Gateway error\",\n      message: \"An error occurred checking rate limits\",\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n  }\n}\n\n// Handle requests with admin privileges\nasync function handleAdminRequest(request, backendUrl, env) {\n  try {\n    // Clone the request to modify it\n    const url = new URL(request.url);\n\n    // Log the environment variables for debugging\n    console.log({\n      event: \"admin_request\",\n      modal_endpoint: env.MODAL_ENDPOINT || backendUrl,\n      jwt_secret_present: !!env.SHARED_JWT_SECRET\n    });\n\n    // Create new request to backend\n    const backendRequest = new Request(`${env.MODAL_ENDPOINT || backendUrl}${url.pathname}${url.search}`, {\n      method: request.method,\n      headers: new Headers(request.headers),\n      body: request.body\n    });\n\n    // Create JWT payload\n    const jwtPayload = {\n      iss: \"gimme-ai-gateway\",\n      sub: PROJECT_NAME,\n      exp: Math.floor(Date.now() / 1000) + 300, // 5 minutes expiration\n      iat: Math.floor(Date.now() / 1000),\n      mode: \"admin\",\n      jti: crypto.randomUUID() // Unique token ID to prevent replay\n    };\n\n    // Sign the JWT\n    const jwt = await createJWT(jwtPayload, env.SHARED_JWT_SECRET);\n\n    // Add JWT to Authorization header\n    backendRequest.headers.set('Authorization', `Bearer ${jwt}`);\n\n    // Add auth state to headers (for backward compatibility)\n    backendRequest.headers.set('X-Auth-Mode', 'admin');\n    backendRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n    backendRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n    // Add API keys as headers - they are pulled from the env\n    \n    backendRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n    \n    backendRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n    \n\n    // Log the headers for debugging\n    console.log({\n      event: \"request_headers\",\n      headers: Object.fromEntries([...backendRequest.headers.entries()])\n    });\n\n    // Forward to backend and return response\n    const response = await fetch(backendRequest);\n\n    // Log the response status for debugging\n    console.log({\n      event: \"response_received\",\n      status: response.status,\n      statusText: response.statusText\n    });\n\n    // Clone the response to add CORS headers\n    const corsResponse = new Response(response.body, response);\n    corsResponse.headers.set('Access-Control-Allow-Origin', '*');\n    corsResponse.headers.set('X-Powered-By', 'Gimme-AI Gateway');\n\n    return corsResponse;\n  } catch (error) {\n    console.error({\n      event: \"request_error\",\n      error: error.message,\n      stack: error.stack\n    });\n\n    return new Response(JSON.stringify({\n      error: \"Gateway error\",\n      message: \"Error forwarding request to backend\",\n      details: error.message\n    }), {\n      status: 502,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n  }\n}\n\n// Handle requests with free tier access\nasync function handleFreeRequest(request, backendUrl, env) {\n  try {\n    // Clone the request\n    const url = new URL(request.url);\n\n    // Create new request to backend\n    const backendRequest = new Request(`${backendUrl}${url.pathname}${url.search}`, {\n      method: request.method,\n      headers: new Headers(request.headers),\n      body: request.body\n    });\n\n    // Create JWT payload\n    const jwtPayload = {\n      iss: \"gimme-ai-gateway\",\n      sub: PROJECT_NAME,\n      exp: Math.floor(Date.now() / 1000) + 300, // 5 minutes expiration\n      iat: Math.floor(Date.now() / 1000),\n      mode: \"free\",\n      jti: crypto.randomUUID() // Unique token ID to prevent replay\n    };\n\n    // Sign the JWT\n    const jwt = await createJWT(jwtPayload, env.SHARED_JWT_SECRET);\n\n    // Add JWT to Authorization header\n    backendRequest.headers.set('Authorization', `Bearer ${jwt}`);\n\n    // Add auth state to headers (for backward compatibility)\n    backendRequest.headers.set('X-Auth-Mode', 'free');\n    backendRequest.headers.set('X-Auth-Source', 'gimme-ai-gateway');\n    backendRequest.headers.set('X-Project-Name', PROJECT_NAME);\n\n    // Add API keys as headers - they are pulled from the env\n    \n    backendRequest.headers.set('MODAL_TOKEN_ID', env['MODAL_TOKEN_ID']);\n    \n    backendRequest.headers.set('MODAL_TOKEN_SECRET', env['MODAL_TOKEN_SECRET']);\n    \n\n    // Forward to backend and return response\n    const response = await fetch(backendRequest);\n\n    // Clone the response to add CORS headers\n    const corsResponse = new Response(response.body, response);\n    corsResponse.headers.set('Access-Control-Allow-Origin', '*');\n    corsResponse.headers.set('X-Powered-By', 'Gimme-AI Gateway');\n\n    return corsResponse;\n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: \"Gateway error\",\n      message: \"Error forwarding request to backend\",\n      details: error.message\n    }), {\n      status: 502,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n  }\n}\n\n// Handle CORS preflight requests\nfunction handleCorsRequest() {\n  return new Response(null, {\n    status: 204,\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n      \"Access-Control-Max-Age\": \"86400\"\n    }\n  });\n}\n\n// Handle status requests\nfunction handleStatusRequest(env, clientIP, isAdmin) {\n  const mode = isAdmin ? \"admin\" : \"free\";\n  const limit = isAdmin ? \"unlimited\" : \"5\";\n\n  return new Response(JSON.stringify({\n    status: \"online\",\n    project: PROJECT_NAME,\n    mode: mode,\n    rate_limit: limit,\n    client_ip: clientIP,\n    timestamp: new Date().toISOString()\n  }), {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"X-Powered-By\": \"Gimme-AI Gateway\"\n    }\n  });\n}\n\n// Export only the rate limiters (removed duplicate workflow export)\nexport { IPRateLimiter, GlobalRateLimiter };"],
  "mappings": "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",
  "names": []
}
